{
  
    
        "post0": {
            "title": "Hacks / Notes 1 & 2",
            "content": "3.1.1 . Blog: . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. Assign variable that coorelates to the function so less errors are made 3 different data types that support different data * integer (numbers) * string (or text/letters) * Boolean (True/False statements) . Questions: . What exactly IS a variable? . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time . | What is the best data type to represent someone&#39;s dog&#39;s name? . String . | Why is it important to give variables specific names before containing values? . So you don&#39;t get them mixed up . | What is the best way to represent someone&#39;s phone number? . String . Bonus (Not required but important to know): . | How can we update a variable&#39;s value . (blank) = updated version . | What function is used to recieve a user&#39;s input? . Input . | | . Hacks: Assignment Operater: The operator used to assign a new value to a variable, property, event or indexer element. Example: X = 5 Collegeboard uses arrow symbols to assign a value to a variable. A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? The variable would display 22. . x = 22 x = 15 display(x) . 3.1.2 . Questions: . What is a list? . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . | What is an element . A fragment of computer code (can be any piece of computer readable text) . | What is an easy way to reference the elements in a list or string? . | . WorldCup = [&quot;argentina&quot;, &quot;portugal&quot;, &quot;france&quot;, &quot;spain&quot;] print(WorldCup) . What is an example of a string? | . print(&quot;Hello Universe&quot;) . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . 3.2.1 . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range(len(numlist)): numlist[i -1] += int(add) print(numlist) . 3.2.2 . Hacks . Food = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwich&quot;] display(Food) . Why are using lists better for a program, rather than writing out each line of code? . It&#39;s more efficent because rather than imputing data one by one you can do it way faster using lists. . | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list . | . country1 = &quot;Iran&quot; country2 = &quot;Switzerland&quot; country3 = &quot;Japan&quot; country4 = &quot;Ghana&quot; # Inputing values one by one print(country1, country2, country3, country4) .",
            "url": "https://gigtieup.github.io/quinnbireley7/collegeboard/2022/12/07/thing.html",
            "relUrl": "/collegeboard/2022/12/07/thing.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Hacks / Notes 3 & 4",
            "content": "What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . Sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . Selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . Iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . What is a Substring? . A substring is part of an existing string | . Personal Notes &amp; Topics to Study . Conditions within Iterations | Sequencing | Usage of SubStrings EX: print(string[5:10]) | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: 1, 2 | Selection: 3, 5 | Iteration: 4 | . CrossWord Puzzle Hack . Recursive | Selection | Sequence |",
            "url": "https://gigtieup.github.io/quinnbireley7/2022/12/07/sgogigi.html",
            "relUrl": "/2022/12/07/sgogigi.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Hacks / Notes 5 & 7",
            "content": "isRaining = False result = not(isRaining) print(result) . true . grade = 75 # Has to be between 70 and 100 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . Logical Operator . A logical operator is a symbol or word used to connect two or more expressions Selection | The specific block of code that will execute depending on the algorithm condition returning true or false. Algorithm | A specific task that is completed with the use of instructions Conditional Statement / If-Statement: | A statement that affects the sequence of control by executing certain statements depending on the value of a boolean (true or false). | . SoccerMinutesPlayed = 48 if SoccerMinutesPlayed &gt; 40: print(&quot;you played over half the soccer game, congradulations!&quot;) else: print(&quot;You need to train more&quot;) # Adding another variation to the hack . True You passed the quiz you played over half the soccer game, congradulations! . import random a_list = [27, 32, 96,] random.shuffle(a_list) a_list[0] if a_list == 27: print(result) else: print(&#39;your number is not 27&#39;) # If statement . your number is not 27 . import random a=random.randint(1,100) print(a) . 44 .",
            "url": "https://gigtieup.github.io/quinnbireley7/collegeboard/2022/12/07/oth.html",
            "relUrl": "/collegeboard/2022/12/07/oth.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Hacks / Notes 8 & 9",
            "content": "Iteration . repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | . import random i = 10 while (i &lt; 100): print(&#39;you are less than 100 years old&#39;) i = i + 30 if (i &gt; 100): break . nums = [44, 55, 33, 66, 77, 88, 99, 100] for n in nums: if n % 2 == 0: print(&#39;This did not affect you at all&#39;) . This did not affect you at all This did not affect you at all This did not affect you at all This did not affect you at all . Iteration Statement . Iteration statements cause statements to be executed zero or more times, subject to some loop-termination criteria | . for i in range(100,105): i = i + 98 print(i) else: print(&#39;this is how you count from 198 to 202&#39;) . you are less than 100 years old you are less than 100 years old you are less than 100 years old This did not affect you at all This did not affect you at all This did not affect you at all This did not affect you at all 198 199 200 201 202 this is how you count from 198 to 202 . a = [3,16,29,42,55,68,81] c = 2 while (c) &gt; 1: c +=1 print(a); c == 3 break . [3, 16, 29, 42, 55, 68, 81] . nums = [&quot;30&quot;, &quot;40&quot;, &quot;50&quot;, &quot;15&quot;, &quot;20&quot;, &quot;433&quot;] minimum = min(nums) print(minimum, &quot;This is the lowest number&quot;) # Part 2 low = (nums[0]) for i in range(len(nums)): if (nums[i]) &lt; low: low = nums[i] print(&quot;the lowest number in nums is:&quot;, low) . 15 This is the lowest number the lowest number in nums is: 15 .",
            "url": "https://gigtieup.github.io/quinnbireley7/lesson%20plans/2022/12/06/tyo.html",
            "relUrl": "/lesson%20plans/2022/12/06/tyo.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Hacks / Notes 10 & 11",
            "content": "Unit 3.9.1 Hacks . 1) It is important to know that algorithms can have different results even though they look the same because it is good to know different ways to accomplish the same thing. This can help visualized the steps and process to make the coding process more efficient. . In addition algorithms having different outputs but similar code is important to know when trouble shooting code in order to find out what is wrong. . isTeams = False isScore = True if isTeams == True: print(&quot;You didn&#39;t win the game yet!&quot;) else: if isScore == True: print(&quot;You won!&quot;) else: print(&quot;You didn&#39;t win the game yet!&quot;) . You won! . isTeams = False isScore = True winGame = not(isTeams) and isScore if winGame == False: print(&quot;You didn&#39;t win the game yet!&quot;) if winGame == True: print(&quot;You won the game!&quot;) . You won the game! . 3.9.2 Hacks . Flow chart: natural lan . So if it is raining, and the temp is less then 45 degrees, then you should wear multiple layers, but if it isn&#39;t then, you can wear what ever u want. Although if it isn&#39;t raining, then it asks . isRaining = True temp = 70 if isRaining == True and temp &lt; 45: print(&quot;Wear multiple layers.&quot;) else: if temp &gt; 45: print(&quot;Wear whatever u want&quot;) else: if isRaining == False: bro = input(&quot;is it sunny or snowing?&quot;) else: print(&quot;what is the weather like?&quot;) . Wear whatever u want . 3.9.3 Hacks . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed None. . num = random.randint(0, 100) #print(num) var = False while var == False: put = input(&quot;I am thinking of a number from between 1-100.&quot;) print(put) if num &lt; int(put): print(&quot;Guess a lower number&quot;) if int(put) &lt; num: print(&quot;Guess a higher number&quot;) if num == int(put): print(&quot;Good Job, You guessed the right number!&quot;) var = True . 50 Guess a higher number 60 Guess a higher number 70 Guess a higher number 80 Guess a higher number 90 Guess a lower number 90 Guess a lower number 85 Guess a lower number 83 Guess a higher number 84 Good Job, You guessed the right number! . 3.11 Hacks . index = [12, 14, 43, 57, 79, 80, 99] mid = int(len(index) / 2) print(mid) print(index[mid]) . 3 57 . index = [92, 43, 74, 66, 30, 12, 1] mid = int(len(index) / 2) print(mid) print(index[mid]) . 3 66 . index = [7, 13, 96, 111, 33, 84, 60] mid = int(len(index) / 2) print(mid) print(index[mid]) . 3 111 .",
            "url": "https://gigtieup.github.io/quinnbireley7/2022/12/06/again.html",
            "relUrl": "/2022/12/06/again.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Unit 3, Section 17: Algorithm Efficiency - Kush . What is Algorithm Efficiency? . Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . How do we know if an algorithm is efficient or not? . In the last slide, we were talking about a sorting algorithm and we discussed two ways that we could sort the numbers in the order from least to greatest. The reason the second one ran faster than the first one is because scanning all of them is quicker than scanning one by one. An algorithm’s efficiency is determined through formal or mathematical reasoning. My reasoning was more formal than mathematical. . How can you use algorithms to better your life: Mini activity . Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my math homework. . Coding the algorithm In Python . Creating a calculator in Python . It can add, subtract, multiply, divide | Once you do your operation, there should be a option to do it again | . Taking a heuristic approach to problems P1 . Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Hacks/assignment . Write 2 algorithms to sort a list of numbers from greatest to least. Detail exactly what your algorithm does in your fastpages. No coding in this step | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages | .",
            "url": "https://gigtieup.github.io/quinnbireley7/2022/11/28/lesson.html",
            "relUrl": "/2022/11/28/lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Project plan",
            "content": "We are going to create a website that simulates a real online website that you can shop on | We want to create different products with different prices | We also want the website to have all of the basics that normal websites have | On our website we want to create a calculator, so when you add something to your cart a price will be calculated | When you check out we are going to add a 7.75% tax to the total because that is the sales tax in San Diego | We are going to have a flat price added to the total to represent the cost of shipping | .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/27/jsb.html",
            "relUrl": "/markdown/2022/09/27/jsb.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 7",
            "content": "My groups links . Quinn&#39;s Teacher-3.0 Overall-3.0 Yasha&#39;s Teacher-2.8 Overall-2.8 James&#39;s Teacher-2.7 Overall-2.7 Aaron&#39;s Teacher-2.7 Overall-2.7 .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/27/jccj.html",
            "relUrl": "/markdown/2022/09/27/jccj.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Java table",
            "content": "&lt;div id=&quot;javascriptTable&quot;&gt; &lt;/div&gt; &lt;script&gt; const data = [&quot;yasha&quot;,&quot;james&quot;,&quot;quinn&quot;,&quot;aaron&quot;] let table = document.createElement(&quot;table&quot;); let row = document.createElement(&quot;tr&quot;); for(let i=0; i&lt;data.length; i++){ let td=document.createElement(&quot;td&quot;); let node=document.createTextNode(data[i]); td.appendChild(node); row.appendChild(td); } table.appendChild(row); let div = document.getElementById(&quot;javascriptTable&quot;); div.appendChild(table); &lt;/script&gt; .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/25/javascript-table.html",
            "relUrl": "/markdown/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 6",
            "content": "My groups links . Quinn&#39;s Teacher- 2.5 Student- 2.7 Overal- 2.6 Yasha&#39;s Teacher- 2.7 Student- 2.7 Overal- 2.7 Aaron&#39;s Teacher- 2.7 Student- 2.7 Overal- 2.7 James&#39;s Teacher- 2.7 Student- 2.7 Overal- 2.7 .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/19/links-3.html",
            "relUrl": "/markdown/2022/09/19/links-3.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Week 3/4 submition",
            "content": "Code.org persinal program (phone password = 1970) . HERE . Scrum Board . HERE . Quiz plan . HERE . My issue . HERE . Extra organization . HERE .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/12/week-3-4.html",
            "relUrl": "/markdown/2022/09/12/week-3-4.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Progect plan",
            "content": "My progect plan: . Create a quiz similar to the example (Just to get a feel for the program) | Brainstorm (How to make my website/ function stand out) | Create (Use what I know from building the original quiz and the brainstorm plan to create what website I had in mind) | Check/ Ask (Ask teacher and classmates if anything needs to be added or changed) | . Drafting: . For my code I used a simple repeating command “on event (“Button name”,”click”, function(){“ (what this did was basically set the command for a button to take you to a separate page) . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/12/quiz-plan.html",
            "relUrl": "/markdown/2022/09/12/quiz-plan.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Week 3",
            "content": "My groups links #3 . Quinn&#39;s 2.9+ Yasha&#39;s 2.8+ Aaron&#39;s 2.7+ James&#39;s 2.7+ .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/12/my-groups-links-3.html",
            "relUrl": "/markdown/2022/09/12/my-groups-links-3.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Week 8",
            "content": "My groups links . Quinn&#39;s . Yasha&#39;s . James&#39;s . Aaron&#39;s .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/10/fjijr.html",
            "relUrl": "/markdown/2022/09/10/fjijr.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Week 2",
            "content": "My groups links #2 . Quinn&#39;s Yasha&#39;s Aaron&#39;s James&#39;s .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/06/links-2.html",
            "relUrl": "/markdown/2022/09/06/links-2.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Lists, Dictionaries, and Iterations",
            "content": "# variable of type string name = &quot;Quinn&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float Weight = 169 print(&quot;Weight&quot;, Weight, type(Weight)) # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;Weight&quot;: weight, } print(&quot;person&quot;, person, type(person)) print(&#39;-person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Quinn&quot;, &quot;LastName&quot;: &quot;Bireley&quot;, &quot;DOB&quot;: &quot;July 22&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;quinnbireley@gmail.com&quot;, &quot;Height&quot;: &quot;5&#39;11&quot;, }) # Print the data structure print(InfoDb) . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Height: 169&quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) .",
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/09/06/di.html",
            "relUrl": "/jupyter/2022/09/06/di.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 1",
            "content": "My groups links . Quinn&#39;s Yasha&#39;s Aaron&#39;s James&#39;s .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/09/01/links.html",
            "relUrl": "/markdown/2022/09/01/links.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "CS Terms.",
            "content": "Push/Pull - to send/recieve code to and from GitHub . Print - input that prints a specific method on the screen . Markdown - syntax used to format plain text . Define - defining a function or method . If statement - used for conditional execution . Front Matter - section of code that is on top of files with key-values . Variable - word used as a container to hold information . String - series of characters . Boolean - value that is either true or false .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/29/vocab.html",
            "relUrl": "/markdown/2022/08/29/vocab.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "My First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;Chose the correct definision for a Vector (c++) n(a) A sequential container to store elements and NOT index based n(b) A fixed-size sequential collection of elements of the same type and it is index based&quot;, &quot;Can you reverse a string in Java? nyes/ nno&quot;, &quot;Is this working? nyes/ nno&quot;, &quot;What is this letter? (y) n(y) n(p)&quot;, ] questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;no&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;y&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/08/29/my-quiz.html",
            "relUrl": "/jupyter/2022/08/29/my-quiz.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "My Day.",
            "content": "6:05-6:20 . Wake up &amp; Eat . 6:20-7:10 . Workout . 7:10-7:45 . Shower &amp; Eat again . 7:45-8:10 . Get ready for school . 8:10-8:15 . leave for school . 3:45-4:00 . Get home from school . 4:00-8:00 . Go to my job at B&amp;B . 8:00-8:20 . Get home &amp; Eat dinner . 8:30-12:45 . Homework . 12:45-1:00 . Shower &amp; Go to bed .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/29/My-Day.html",
            "relUrl": "/markdown/2022/08/29/My-Day.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "My first blog post.",
            "content": "My name is Quinn Bireley and I love to surf. .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "My Jupyter Notebook",
            "content": "print(&quot;hello&quot;) .",
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/08/22/first-notebook.html",
            "relUrl": "/jupyter/2022/08/22/first-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Notebook quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you go 4 out of 4 .",
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/06/09/notebook-quiz.html",
            "relUrl": "/jupyter/2022/06/09/notebook-quiz.html",
            "date": " • Jun 9, 2022"
        }
        
    
  

  
  

  

  

  
      ,"page3": {
          "title": "Organization",
          "content": "Week 0 . My Jupyter Notebook | My first blog post Week 1 . | My Day | My Quiz | CS Terms | Group links for week 1 Week 2 . | Notebook quiz | Lists, Dictionaries, and Iterations | Group links for week 2 | Tags | Timebox Week 3 . | Week 3/4 submition | Quiz plan | Group links for week 3 | .",
          "url": "https://gigtieup.github.io/quinnbireley7/_pages/org.html",
          "relUrl": "/_pages/org.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  

  
  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gigtieup.github.io/quinnbireley7/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}