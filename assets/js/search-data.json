{
  
    
        "post0": {
            "title": "Test",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Bash Test n”, “&gt; Testing to see all stuff is installed n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [jupyter, bash] n”, “- image: images/chart-preview.png” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Python 2.7.18 n”, “Python 2.7.18 n” ] } ], “source”: [ “python –version n”, “python2 –version” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “# packages in environment at /Users/hbadkoobehi/opt/anaconda3: n”, “# n”, “# Name Version Build Channel n”, “_ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 n”, “aiohttp 3.8.1 py39hca72f7f_1 n”, “aiosignal 1.2.0 pyhd3eb1b0_0 n”, “alabaster 0.7.12 pyhd3eb1b0_0 n”, “anaconda 2022.05 py39_0 n”, “anaconda-client 1.9.0 py39hecd8cb5_0 n”, “anaconda-navigator 2.1.4 py39hecd8cb5_0 n”, “anaconda-project 0.10.2 pyhd3eb1b0_0 n”, “anyio 3.5.0 py39hecd8cb5_0 n”, “appdirs 1.4.4 pyhd3eb1b0_0 n”, “applaunchservices 0.2.1 pyhd3eb1b0_0 n”, “appnope 0.1.2 py39hecd8cb5_1001 n”, “appscript 1.1.2 py39h9ed2024_0 n”, “argon2-cffi 21.3.0 pyhd3eb1b0_0 n”, “argon2-cffi-bindings 21.2.0 py39hca72f7f_0 n”, “arrow 1.2.2 pyhd3eb1b0_0 n”, “astroid 2.6.6 py39hecd8cb5_0 n”, “astropy 5.0.4 py39h67323c0_0 n”, “asttokens 2.0.5 pyhd3eb1b0_0 n”, “async-timeout 4.0.1 pyhd3eb1b0_0 n”, “atomicwrites 1.4.0 py_0 n”, “attrs 21.4.0 pyhd3eb1b0_0 n”, “automat 20.2.0 py_0 n”, “autopep8 1.6.0 pyhd3eb1b0_0 n”, “babel 2.9.1 pyhd3eb1b0_0 n”, “backcall 0.2.0 pyhd3eb1b0_0 n”, “backports 1.1 pyhd3eb1b0_0 n”, “backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 n”, “backports.tempfile 1.0 pyhd3eb1b0_1 n”, “backports.weakref 1.0.post1 py_1 n”, “bash-kernel 0.7.2 pypi_0 pypi n”, “bcrypt 3.2.0 py39h9ed2024_0 n”, “beautifulsoup4 4.11.1 py39hecd8cb5_0 n”, “binaryornot 0.4.4 pyhd3eb1b0_1 n”, “bitarray 2.4.1 py39hca72f7f_0 n”, “bkcharts 0.2 py39hecd8cb5_0 n”, “black 19.10b0 py_0 n”, “blas 1.0 mkl n”, “bleach 4.1.0 pyhd3eb1b0_0 n”, “blosc 1.21.0 h2842e9f_0 n”, “bokeh 2.4.2 py39hecd8cb5_0 n”, “boto3 1.21.32 pyhd3eb1b0_0 n”, “botocore 1.24.32 pyhd3eb1b0_0 n”, “bottleneck 1.3.4 py39h67323c0_0 n”, “brotli 1.0.9 hb1e8313_2 n”, “brotlipy 0.7.0 py39h9ed2024_1003 n”, “brunsli 0.1 h23ab428_0 n”, “bzip2 1.0.8 h1de35cc_0 n”, “c-ares 1.18.1 hca72f7f_0 n”, “ca-certificates 2022.3.29 hecd8cb5_1 n”, “cachetools 4.2.2 pyhd3eb1b0_0 n”, “certifi 2021.10.8 py39hecd8cb5_2 n”, “cffi 1.15.0 py39hc55c11b_1 n”, “cfitsio 3.470 hee0f690_6 n”, “chardet 4.0.0 py39hecd8cb5_1003 n”, “charls 2.2.0 h23ab428_0 n”, “charset-normalizer 2.0.4 pyhd3eb1b0_0 n”, “click 8.0.4 py39hecd8cb5_0 n”, “cloudpickle 2.0.0 pyhd3eb1b0_0 n”, “clyent 1.2.2 py39hecd8cb5_1 n”, “colorama 0.4.4 pyhd3eb1b0_0 n”, “colorcet 2.0.6 pyhd3eb1b0_0 n”, “conda 4.13.0 py39hecd8cb5_0 n”, “conda-build 3.21.8 py39hecd8cb5_2 n”, “conda-content-trust 0.1.1 pyhd3eb1b0_0 n”, “conda-env 2.6.0 1 n”, “conda-pack 0.6.0 pyhd3eb1b0_0 n”, “conda-package-handling 1.8.1 py39hca72f7f_0 n”, “conda-repo-cli 1.0.4 pyhd3eb1b0_0 n”, “conda-token 0.3.0 pyhd3eb1b0_0 n”, “conda-verify 3.4.2 py_1 n”, “constantly 15.1.0 pyh2b92418_0 n”, “cookiecutter 1.7.3 pyhd3eb1b0_0 n”, “cryptography 3.4.8 py39h2fd3fbb_0 n”, “cssselect 1.1.0 pyhd3eb1b0_0 n”, “curl 7.82.0 hca72f7f_0 n”, “cycler 0.11.0 pyhd3eb1b0_0 n”, “cython 0.29.28 py39he9d5cce_0 n”, “cytoolz 0.11.0 py39h9ed2024_0 n”, “daal4py 2021.5.0 py39h24a4e90_0 n”, “dal 2021.5.0 hecd8cb5_782 n”, “dask 2022.2.1 pyhd3eb1b0_0 n”, “dask-core 2022.2.1 pyhd3eb1b0_0 n”, “dataclasses 0.8 pyh6d0b6a4_7 n”, “datashader 0.13.0 pyhd3eb1b0_1 n”, “datashape 0.5.4 py39hecd8cb5_1 n”, “debugpy 1.5.1 py39he9d5cce_0 n”, “decorator 5.1.1 pyhd3eb1b0_0 n”, “defusedxml 0.7.1 pyhd3eb1b0_0 n”, “diff-match-patch 20200713 pyhd3eb1b0_0 n”, “distributed 2022.2.1 pyhd3eb1b0_0 n”, “docutils 0.17.1 py39hecd8cb5_1 n”, “entrypoints 0.4 py39hecd8cb5_0 n”, “et_xmlfile 1.1.0 py39hecd8cb5_0 n”, “executing 0.8.3 pyhd3eb1b0_0 n”, “filelock 3.6.0 pyhd3eb1b0_0 n”, “flake8 3.9.2 pyhd3eb1b0_0 n”, “flask 1.1.2 pyhd3eb1b0_0 n”, “fonttools 4.25.0 pyhd3eb1b0_0 n”, “freetype 2.11.0 hd8bbffd_0 n”, “frozenlist 1.2.0 py39hca72f7f_0 n”, “fsspec 2022.2.0 pyhd3eb1b0_0 n”, “future 0.18.2 py39hecd8cb5_1 n”, “gensim 4.1.2 py39he9d5cce_0 n”, “giflib 5.2.1 haf1e3a3_0 n”, “glob2 0.7 pyhd3eb1b0_0 n”, “gmp 6.2.1 h23ab428_2 n”, “gmpy2 2.1.2 py39hd5de756_0 n”, “google-api-core 1.25.1 pyhd3eb1b0_0 n”, “google-auth 1.33.0 pyhd3eb1b0_0 n”, “google-cloud-core 1.7.1 pyhd3eb1b0_0 n”, “google-cloud-storage 1.31.0 py_0 n”, “google-crc32c 1.1.2 py39h9ed2024_0 n”, “google-resumable-media 1.3.1 pyhd3eb1b0_1 n”, “googleapis-common-protos 1.53.0 py39hecd8cb5_0 n”, “greenlet 1.1.1 py39h23ab428_0 n”, “grpcio 1.42.0 py39ha29bfda_0 n”, “h5py 3.6.0 py39h4a1dd59_0 n”, “hdf5 1.10.6 hdbbcd12_0 n”, “heapdict 1.0.1 pyhd3eb1b0_0 n”, “holoviews 1.14.8 pyhd3eb1b0_0 n”, “hvplot 0.7.3 pyhd3eb1b0_1 n”, “hyperlink 21.0.0 pyhd3eb1b0_0 n”, “icu 58.2 h0a44026_3 n”, “idna 3.3 pyhd3eb1b0_0 n”, “imagecodecs 2021.8.26 py39ha952a84_0 n”, “imageio 2.9.0 pyhd3eb1b0_0 n”, “imagesize 1.3.0 pyhd3eb1b0_0 n”, “importlib-metadata 4.11.3 py39hecd8cb5_0 n”, “importlib_metadata 4.11.3 hd3eb1b0_0 n”, “incremental 21.3.0 pyhd3eb1b0_0 n”, “inflection 0.5.1 py39hecd8cb5_0 n”, “iniconfig 1.1.1 pyhd3eb1b0_0 n”, “intake 0.6.5 pyhd3eb1b0_0 n”, “intel-openmp 2021.4.0 hecd8cb5_3538 n”, “intervaltree 3.1.0 pyhd3eb1b0_0 n”, “ipykernel 6.9.1 py39hecd8cb5_0 n”, “ipython 8.2.0 py39hecd8cb5_0 n”, “ipython_genutils 0.2.0 pyhd3eb1b0_1 n”, “ipywidgets 7.6.5 pyhd3eb1b0_1 n”, “isort 5.9.3 pyhd3eb1b0_0 n”, “itemadapter 0.3.0 pyhd3eb1b0_0 n”, “itemloaders 1.0.4 pyhd3eb1b0_1 n”, “itsdangerous 2.0.1 pyhd3eb1b0_0 n”, “jdcal 1.4.1 pyhd3eb1b0_0 n”, “jedi 0.18.1 py39hecd8cb5_1 n”, “jinja2 2.11.3 pyhd3eb1b0_0 n”, “jinja2-time 0.2.0 pyhd3eb1b0_3 n”, “jmespath 0.10.0 pyhd3eb1b0_0 n”, “joblib 1.1.0 pyhd3eb1b0_0 n”, “jpeg 9e hca72f7f_0 n”, “jq 1.6 h9ed2024_1000 n”, “json5 0.9.6 pyhd3eb1b0_0 n”, “jsonschema 4.4.0 py39hecd8cb5_0 n”, “jupyter 1.0.0 py39hecd8cb5_7 n”, “jupyter_client 6.1.12 pyhd3eb1b0_0 n”, “jupyter_console 6.4.0 pyhd3eb1b0_0 n”, “jupyter_core 4.9.2 py39hecd8cb5_0 n”, “jupyter_server 1.13.5 pyhd3eb1b0_0 n”, “jupyterlab 3.3.2 pyhd3eb1b0_0 n”, “jupyterlab_pygments 0.1.2 py_0 n”, “jupyterlab_server 2.10.3 pyhd3eb1b0_1 n”, “jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 n”, “jxrlib 1.1 haf1e3a3_2 n”, “keyring 23.4.0 py39hecd8cb5_0 n”, “kiwisolver 1.3.2 py39he9d5cce_0 n”, “krb5 1.19.2 hcd88c3b_0 n”, “lazy-object-proxy 1.6.0 py39h9ed2024_0 n”, “lcms2 2.12 hf1fd2bf_0 n”, “lerc 3.0 he9d5cce_0 n”, “libaec 1.0.4 hb1e8313_1 n”, “libarchive 3.4.2 haa3ed63_0 n”, “libcrc32c 1.1.1 hb1e8313_2 n”, “libcurl 7.82.0 h6dfd666_0 n”, “libcxx 12.0.0 h2f01273_0 n”, “libdeflate 1.8 h9ed2024_5 n”, “libedit 3.1.20210910 hca72f7f_0 n”, “libev 4.33 h9ed2024_1 n”, “libffi 3.3 hb1e8313_2 n”, “libgfortran 3.0.1 h93005f0_2 n”, “libiconv 1.16 hca72f7f_2 n”, “libidn2 2.3.2 h9ed2024_0 n”, “liblief 0.11.5 he9d5cce_1 n”, “libllvm11 11.1.0 h46f1229_1 n”, “libnghttp2 1.46.0 ha29bfda_0 n”, “libpng 1.6.37 ha441bb4_0 n”, “libprotobuf 3.19.1 h8346a28_0 n”, “libsodium 1.0.18 h1de35cc_0 n”, “libspatialindex 1.9.3 h23ab428_0 n”, “libssh2 1.10.0 h0a4fc7d_0 n”, “libtiff 4.2.0 h87d7836_0 n”, “libunistring 0.9.10 h9ed2024_0 n”, “libwebp 1.2.2 h56c3ce4_0 n”, “libwebp-base 1.2.2 hca72f7f_0 n”, “libxml2 2.9.12 hcdb78fc_0 n”, “libxslt 1.1.34 h83b36ba_0 n”, “libzopfli 1.0.3 hb1e8313_0 n”, “llvm-openmp 12.0.0 h0dcd299_1 n”, “llvmlite 0.38.0 py39h8346a28_0 n”, “locket 0.2.1 py39hecd8cb5_2 n”, “lxml 4.8.0 py39h65b224f_0 n”, “lz4-c 1.9.3 h23ab428_1 n”, “lzo 2.10 haf1e3a3_2 n”, “markdown 3.3.4 py39hecd8cb5_0 n”, “markupsafe 2.0.1 py39h9ed2024_0 n”, “matplotlib 3.5.1 py39hecd8cb5_1 n”, “matplotlib-base 3.5.1 py39hfb0c5b7_1 n”, “matplotlib-inline 0.1.2 pyhd3eb1b0_2 n”, “mccabe 0.6.1 py39hecd8cb5_1 n”, “mistune 0.8.4 py39h9ed2024_1000 n”, “mkl 2021.4.0 hecd8cb5_637 n”, “mkl-service 2.4.0 py39h9ed2024_0 n”, “mkl_fft 1.3.1 py39h4ab4a9b_0 n”, “mkl_random 1.2.2 py39hb2f4e1b_0 n”, “mock 4.0.3 pyhd3eb1b0_0 n”, “mpc 1.1.0 h6ef4df4_1 n”, “mpfr 4.0.2 h9066e36_1 n”, “mpi 1.0 mpich n”, “mpich 3.3.2 hc856adb_0 n”, “mpmath 1.2.1 py39hecd8cb5_0 n”, “msgpack-python 1.0.2 py39hf7b0b51_1 n”, “multidict 5.2.0 py39hca72f7f_2 n”, “multipledispatch 0.6.0 py39hecd8cb5_0 n”, “munkres 1.1.4 py_0 n”, “mypy_extensions 0.4.3 py39hecd8cb5_1 n”, “navigator-updater 0.2.1 py39_1 n”, “nbclassic 0.3.5 pyhd3eb1b0_0 n”, “nbclient 0.5.13 py39hecd8cb5_0 n”, “nbconvert 6.4.4 py39hecd8cb5_0 n”, “nbformat 5.3.0 py39hecd8cb5_0 n”, “ncurses 6.3 hca72f7f_2 n”, “nest-asyncio 1.5.5 py39hecd8cb5_0 n”, “networkx 2.7.1 pyhd3eb1b0_0 n”, “nltk 3.7 pyhd3eb1b0_0 n”, “nodejs 10.13.0 h0a44026_0 n”, “nose 1.3.7 pyhd3eb1b0_1008 n”, “notebook 6.4.8 py39hecd8cb5_0 n”, “numba 0.55.1 py39hae1ba45_0 n”, “numexpr 2.8.1 py39h2e5f0a9_0 n”, “numpy 1.21.5 py39h2e5f0a9_1 n”, “numpy-base 1.21.5 py39h3b1a694_1 n”, “numpydoc 1.2 pyhd3eb1b0_0 n”, “olefile 0.46 pyhd3eb1b0_0 n”, “oniguruma 6.9.7.1 h9ed2024_0 n”, “openjpeg 2.4.0 h66ea3da_0 n”, “openpyxl 3.0.9 pyhd3eb1b0_0 n”, “openssl 1.1.1n hca72f7f_0 n”, “packaging 21.3 pyhd3eb1b0_0 n”, “pandas 1.4.2 py39he9d5cce_0 n”, “pandocfilters 1.5.0 pyhd3eb1b0_0 n”, “panel 0.13.0 py39hecd8cb5_0 n”, “param 1.12.0 pyhd3eb1b0_0 n”, “parsel 1.6.0 py39hecd8cb5_0 n”, “parso 0.8.3 pyhd3eb1b0_0 n”, “partd 1.2.0 pyhd3eb1b0_1 n”, “pathspec 0.7.0 py_0 n”, “patsy 0.5.2 py39hecd8cb5_1 n”, “pep8 1.7.1 py39hecd8cb5_0 n”, “pexpect 4.8.0 pyhd3eb1b0_3 n”, “pickleshare 0.7.5 pyhd3eb1b0_1003 n”, “pillow 9.0.1 py39hde71d04_0 n”, “pip 21.2.4 py39hecd8cb5_0 n”, “pkginfo 1.8.2 pyhd3eb1b0_0 n”, “plotly 5.6.0 pyhd3eb1b0_0 n”, “pluggy 1.0.0 py39hecd8cb5_1 n”, “poyo 0.5.0 pyhd3eb1b0_0 n”, “prometheus_client 0.13.1 pyhd3eb1b0_0 n”, “prompt-toolkit 3.0.20 pyhd3eb1b0_0 n”, “prompt_toolkit 3.0.20 hd3eb1b0_0 n”, “protego 0.1.16 py_0 n”, “protobuf 3.19.1 py39he9d5cce_0 n”, “psutil 5.8.0 py39h9ed2024_1 n”, “ptyprocess 0.7.0 pyhd3eb1b0_2 n”, “pure_eval 0.2.2 pyhd3eb1b0_0 n”, “py 1.11.0 pyhd3eb1b0_0 n”, “py-lief 0.11.5 py39he9d5cce_1 n”, “pyasn1 0.4.8 pyhd3eb1b0_0 n”, “pyasn1-modules 0.2.8 py_0 n”, “pycodestyle 2.7.0 pyhd3eb1b0_0 n”, “pycosat 0.6.3 py39h9ed2024_0 n”, “pycparser 2.21 pyhd3eb1b0_0 n”, “pyct 0.4.6 py39hecd8cb5_0 n”, “pycurl 7.44.1 py39hbcfaee0_1 n”, “pydispatcher 2.0.5 py39hecd8cb5_2 n”, “pydocstyle 6.1.1 pyhd3eb1b0_0 n”, “pyerfa 2.0.0 py39h9ed2024_0 n”, “pyflakes 2.3.1 pyhd3eb1b0_0 n”, “pygments 2.11.2 pyhd3eb1b0_0 n”, “pyhamcrest 2.0.2 pyhd3eb1b0_2 n”, “pyjwt 2.1.0 py39hecd8cb5_0 n”, “pylint 2.9.6 py39hecd8cb5_1 n”, “pyls-spyder 0.4.0 pyhd3eb1b0_0 n”, “pyodbc 4.0.32 py39he9d5cce_1 n”, “pyopenssl 21.0.0 pyhd3eb1b0_1 n”, “pyparsing 3.0.4 pyhd3eb1b0_0 n”, “pyqt 5.9.2 py39h23ab428_6 n”, “pyrsistent 0.18.0 py39hca72f7f_0 n”, “pysocks 1.7.1 py39hecd8cb5_0 n”, “pytables 3.6.1 py39h648f197_1 n”, “pytest 7.1.1 py39hecd8cb5_0 n”, “python 3.9.12 hdfd78df_0 n”, “python-dateutil 2.8.2 pyhd3eb1b0_0 n”, “python-fastjsonschema 2.15.1 pyhd3eb1b0_0 n”, “python-libarchive-c 2.9 pyhd3eb1b0_1 n”, “python-lsp-black 1.0.0 pyhd3eb1b0_0 n”, “python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 n”, “python-lsp-server 1.2.4 pyhd3eb1b0_0 n”, “python-slugify 5.0.2 pyhd3eb1b0_0 n”, “python-snappy 0.6.0 py39h23ab428_3 n”, “python.app 3 py39hca72f7f_0 n”, “pytz 2021.3 pyhd3eb1b0_0 n”, “pyviz_comms 2.0.2 pyhd3eb1b0_0 n”, “pywavelets 1.3.0 py39hca72f7f_0 n”, “pyyaml 6.0 py39hca72f7f_1 n”, “pyzmq 22.3.0 py39he9d5cce_2 n”, “qdarkstyle 3.0.2 pyhd3eb1b0_0 n”, “qstylizer 0.1.10 pyhd3eb1b0_0 n”, “qt 5.9.7 h468cd18_1 n”, “qtawesome 1.0.3 pyhd3eb1b0_0 n”, “qtconsole 5.3.0 pyhd3eb1b0_0 n”, “qtpy 2.0.1 pyhd3eb1b0_0 n”, “queuelib 1.5.0 py39hecd8cb5_0 n”, “readline 8.1.2 hca72f7f_1 n”, “regex 2022.3.15 py39hca72f7f_0 n”, “requests 2.27.1 pyhd3eb1b0_0 n”, “requests-file 1.5.1 pyhd3eb1b0_0 n”, “ripgrep 12.1.1 0 n”, “rope 0.22.0 pyhd3eb1b0_0 n”, “rsa 4.7.2 pyhd3eb1b0_1 n”, “rtree 0.9.7 py39hecd8cb5_1 n”, “ruamel_yaml 0.15.100 py39h9ed2024_0 n”, “s3transfer 0.5.0 pyhd3eb1b0_0 n”, “scikit-image 0.19.2 py39hae1ba45_0 n”, “scikit-learn 1.0.2 py39hae1ba45_1 n”, “scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 n”, “scipy 1.7.3 py39h8c7af03_0 n”, “scrapy 2.6.1 py39hecd8cb5_0 n”, “seaborn 0.11.2 pyhd3eb1b0_0 n”, “send2trash 1.8.0 pyhd3eb1b0_1 n”, “service_identity 18.1.0 pyhd3eb1b0_1 n”, “setuptools 61.2.0 py39hecd8cb5_0 n”, “sip 4.19.13 py39h23ab428_0 n”, “six 1.16.0 pyhd3eb1b0_1 n”, “smart_open 5.1.0 pyhd3eb1b0_0 n”, “snappy 1.1.9 he9d5cce_0 n”, “sniffio 1.2.0 py39hecd8cb5_1 n”, “snowballstemmer 2.2.0 pyhd3eb1b0_0 n”, “sortedcollections 2.1.0 pyhd3eb1b0_0 n”, “sortedcontainers 2.4.0 pyhd3eb1b0_0 n”, “soupsieve 2.3.1 pyhd3eb1b0_0 n”, “sphinx 4.4.0 pyhd3eb1b0_0 n”, “sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 n”, “sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 n”, “sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 n”, “sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 n”, “sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 n”, “sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 n”, “spyder 5.1.5 py39hecd8cb5_1 n”, “spyder-kernels 2.1.3 py39hecd8cb5_0 n”, “sqlalchemy 1.4.32 py39hca72f7f_0 n”, “sqlite 3.38.2 h707629a_0 n”, “stack_data 0.2.0 pyhd3eb1b0_0 n”, “statsmodels 0.13.2 py39hca72f7f_0 n”, “sympy 1.10.1 py39hecd8cb5_0 n”, “tabulate 0.8.9 py39hecd8cb5_0 n”, “tbb 2021.5.0 haf03e11_0 n”, “tbb4py 2021.5.0 py39haf03e11_0 n”, “tblib 1.7.0 pyhd3eb1b0_0 n”, “tenacity 8.0.1 py39hecd8cb5_0 n”, “terminado 0.13.1 py39hecd8cb5_0 n”, “testpath 0.5.0 pyhd3eb1b0_0 n”, “text-unidecode 1.3 pyhd3eb1b0_0 n”, “textdistance 4.2.1 pyhd3eb1b0_0 n”, “threadpoolctl 2.2.0 pyh0d69192_0 n”, “three-merge 0.1.1 pyhd3eb1b0_0 n”, “tifffile 2021.7.2 pyhd3eb1b0_2 n”, “tinycss 0.4 pyhd3eb1b0_1002 n”, “tk 8.6.11 h7bc2e8c_0 n”, “tldextract 3.2.0 pyhd3eb1b0_0 n”, “toml 0.10.2 pyhd3eb1b0_0 n”, “tomli 1.2.2 pyhd3eb1b0_0 n”, “toolz 0.11.2 pyhd3eb1b0_0 n”, “tornado 6.1 py39h9ed2024_0 n”, “tqdm 4.64.0 py39hecd8cb5_0 n”, “traitlets 5.1.1 pyhd3eb1b0_0 n”, “twisted 22.2.0 py39hca72f7f_0 n”, “typed-ast 1.4.3 py39h9ed2024_1 n”, “typing-extensions 4.1.1 hd3eb1b0_0 n”, “typing_extensions 4.1.1 pyh06a4308_0 n”, “tzdata 2022a hda174b7_0 n”, “ujson 5.1.0 py39he9d5cce_0 n”, “unidecode 1.2.0 pyhd3eb1b0_0 n”, “unixodbc 2.3.9 haf1e3a3_0 n”, “urllib3 1.26.9 py39hecd8cb5_0 n”, “w3lib 1.21.0 pyhd3eb1b0_0 n”, “watchdog 2.1.6 py39h999c104_0 n”, “wcwidth 0.2.5 pyhd3eb1b0_0 n”, “webencodings 0.5.1 py39hecd8cb5_1 n”, “websocket-client 0.58.0 py39hecd8cb5_4 n”, “werkzeug 2.0.3 pyhd3eb1b0_0 n”, “wget 1.21.3 h6dfd666_0 n”, “wheel 0.37.1 pyhd3eb1b0_0 n”, “widgetsnbextension 3.5.2 py39hecd8cb5_0 n”, “wrapt 1.12.1 py39h9ed2024_1 n”, “wurlitzer 3.0.2 py39hecd8cb5_0 n”, “xarray 0.20.1 pyhd3eb1b0_1 n”, “xlrd 2.0.1 pyhd3eb1b0_0 n”, “xlsxwriter 3.0.3 pyhd3eb1b0_0 n”, “xlwings 0.24.9 py39hecd8cb5_0 n”, “xz 5.2.5 h1de35cc_0 n”, “yaml 0.2.5 haf1e3a3_0 n”, “yapf 0.31.0 pyhd3eb1b0_0 n”, “yarl 1.6.3 py39h9ed2024_0 n”, “zeromq 4.3.4 h23ab428_0 n”, “zfp 0.5.5 he9d5cce_6 n”, “zict 2.0.0 pyhd3eb1b0_0 n”, “zipp 3.7.0 pyhd3eb1b0_0 n”, “zlib 1.2.12 h4dc903c_2 n”, “zope 1.0 py39hecd8cb5_1 n”, “zope.interface 5.4.0 py39h9ed2024_0 n”, “zstd 1.4.9 h322a384_0 n” ] } ], “source”: [ “conda list” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Conda Check n”, “jupyter 1.0.0 py39hecd8cb5_7 n”, “jupyter_client 6.1.12 pyhd3eb1b0_0 n”, “jupyter_console 6.4.0 pyhd3eb1b0_0 n”, “jupyter_core 4.9.2 py39hecd8cb5_0 n”, “jupyter_server 1.13.5 pyhd3eb1b0_0 n”, “jupyterlab 3.3.2 pyhd3eb1b0_0 n”, “jupyterlab_pygments 0.1.2 py_0 n”, “jupyterlab_server 2.10.3 pyhd3eb1b0_1 n”, “jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 n” ] } ], “source”: [ “echo Conda Check n”, “# test for a kernel installation n”, “test=&quot;jupyter&quot; # keyword n”, “check=conda list | grep $test # run command n”, “n=${#check} # determine length n”, “ n”, “if [[ ${n} &gt; 0 ]]; # testt length n”, “then # greater than zero n”, “ echo &quot;$check&quot; n”, “else # less than zero n”, “ echo &quot;$test not found&quot; n”, “fi” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Selected Jupyter core packages… n”, “IPython : 8.4.0 n”, “ipykernel : 6.15.1 n”, “ipywidgets : not installed n”, “jupyter_client : 7.3.5 n”, “jupyter_core : 4.11.1 n”, “jupyter_server : not installed n”, “jupyterlab : not installed n”, “nbclient : not installed n”, “nbconvert : not installed n”, “nbformat : not installed n”, “notebook : not installed n”, “qtconsole : not installed n”, “traitlets : 5.3.0 n”, “Available kernels: n”, “ bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash n”, “ python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 n” ] } ], “source”: [ “jupyter –version n”, “jupyter kernelspec list” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Available kernels: n”, “ bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash n”, “ python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 n” ] } ], “source”: [ “jupyter kernelspec list” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “ python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 n” ] } ], “source”: [ “# test for a kernel installation n”, “test=&quot;python3&quot; # keyword n”, “check=jupyter kernelspec list | grep $test # run command n”, “n=${#check} # determine length n”, “ n”, “if [[ ${n} &gt; 0 ]]; # testt length n”, “then # greater than zero n”, “ echo &quot;$check&quot; n”, “else # less than zero n”, “ echo &quot;$test not found&quot; n”, “fi” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Bash”, “language”: “bash”, “name”: “bash” }, “language_info”: { “codemirror_mode”: “shell”, “file_extension”: “.sh”, “mimetype”: “text/x-sh”, “name”: “bash” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “f4522448fa03726c480e11d9815ce2c412646a9816150097c8daa961a4b73c1a” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://gigtieup.github.io/quinnbireley7/2022/08/30/test.html",
            "relUrl": "/2022/08/30/test.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "CS Terms.",
            "content": "Push/Pull - to send/recieve code to and from GitHub . Print - input that prints a specific method on the screen . Markdown - syntax used to format plain text . Define - defining a function or method . If statement - used for conditional execution . Front Matter - section of code that is on top of files with key-values . Variable - word used as a container to hold information . String - series of characters . Boolean - value that is either true or false .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/29/vocab.html",
            "relUrl": "/markdown/2022/08/29/vocab.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;Chose the correct definision for a Vector (c++) n(a) A sequential container to store elements and NOT index based n(b) A fixed-size sequential collection of elements of the same type and it is index based&quot;, &quot;Can you reverse a string in Java? nyes/ nno&quot;, &quot;Is this working? nyes/ nno&quot;, &quot;What is this letter? (y) n(y) n(p)&quot;, ] questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;no&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;y&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/08/29/my-quiz.html",
            "relUrl": "/jupyter/2022/08/29/my-quiz.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My Day.",
            "content": "6:05-6:20 . Wake up &amp; Eat . 6:20-7:10 . Workout . 7:10-7:45 . Shower &amp; Eat again . 7:45-8:10 . Get ready for school . 8:10-8:15 . leave for school . 3:45-4:00 . Get home from school . 4:00-8:00 . Go to my job at B&amp;B . 8:00-8:20 . Get home &amp; Eat dinner . 8:30-12:45 . Homework . 12:45-1:00 . Shower &amp; Go to bed .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/29/My-Day.html",
            "relUrl": "/markdown/2022/08/29/My-Day.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "My first blog post.",
            "content": "My name is Quinn Bireley and I love to surf. .",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "My Jupyter Notebook",
            "content": "print(&quot;hello&quot;) .",
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2022/08/22/first-notebook.html",
            "relUrl": "/jupyter/2022/08/22/first-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gigtieup.github.io/quinnbireley7/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gigtieup.github.io/quinnbireley7/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gigtieup.github.io/quinnbireley7/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gigtieup.github.io/quinnbireley7/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}